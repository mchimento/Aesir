/** This is a test driver generated by KeY 2.7 (internal: a2a4e347dd1bea455ae4b3348756bc8b08987c11) (www.key-project.org). 
 * Possible use cases:
 *  Use Case 1. Using JUnit 4:
 *        javac -cp .:PATH_TO_JUNIT4_JAR *.java
 *        java  -cp .:PATH_TO_JUNIT4_JAR:PATH_TO_HAMCREST_JAR org.junit.runner.JUnitCore TestGeneric2_g
 *  Use Case 2. Use JML runtime checker: 
 *      Compile this file and and execute the main method with a JML runtime checker. On linux you can use the built-in scripts:
 *        ./compileWithOpenJML.sh
 *        ./executeWithOpenJML.sh TestGeneric2_g
 *  Use Case 3. Use simply a program debugger to follow and understand the execution of the program.
 * @author Christoph Gladisch
 * @author Mihai Herda
 */

package mondex;

 public class TestGeneric_g extends junit.framework.TestCase {

 public static junit.framework.Test suite() {    return new junit.framework.JUnit4TestAdapter(TestGeneric2_g.class);
 } 

 public TestGeneric_g(){}


 public static void  main (java.lang.String[]  arg) {
   TestGeneric_g testSuiteObject;
   testSuiteObject=new TestGeneric_g ();

   testSuiteObject.testcode0();
 }

  //Test Case for:
  /*
   !self.nextSeq== 32767
   && self.status== 0
   && m.cpd.name >= 1
   && m.cpd.nextSeqNo >= 0
   && m.cpd.value >= 1
   && m.cpd.value <= self.balance
   */
@org.junit.Test
 public void  testcode0(){
   //Test preamble: creating objects and intialising test data
   short name = (short)1;
   ConPurse _o1 = new ConPurse(name);
   _o1.balance = (short)42;

   //Data for method start_from
   CounterPartyDetails cpd = new CounterPartyDetails((short)2, (short)5, (short)32767);
   Data.m_start_from.setCounterPartyDetailsMessage(name,cpd,Messages.StartFrom);

   /*@ nullable */ ConPurse self = (ConPurse)_o1;

    //Data for req
    /*m_req.id == this.name && transaction.value <= balance
      && checkSameTransaction(m_req) == SWResponses.SW_SUCCESS */
    Data.m_req.setPayDetailsMessage(self.name, self.transaction, Messages.Req);

    //Data for ack
    /* m.label == Messages.Ack && m.id == this.name
       && checkSameTransaction(m) == SWResponses.SW_SUCCESS;
     */
    Data.m_ack.setPayDetailsMessage(self.name,self.transaction,Messages.Ack);

   //Other variables

   /*@ nullable */ java.lang.Throwable exc = null;
   /*@ nullable */ java.lang.Throwable _preexc = null;
   //Calling the method under test   
      
{
  exc=null;try {
    self.start_from_operation(Data.m_start_from);
    self.req_operation(Data.m_req);
    self.ack_operation(Data.m_ack);
  }   catch (java.lang.Throwable e) {
    exc=e;
  }
}
   //calling the test oracle
   assertTrue(testOracle( exc, _preexc, self));
 }

     public boolean testOracle(java.lang.Throwable exc,java.lang.Throwable _preexc,ConPurse self){
         return ((self.status == 4) && (exc == null));
     }
}
